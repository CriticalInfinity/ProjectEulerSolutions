'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import math
def countDivisors(start,n):
    if n==1:
        return 1
    for x in range(start,int(math.ceil(math.sqrt(n)))+1):
        if n%x==0:
            cnt=1
            while n%x==0:
                n=n/x
                cnt+=1
            return countDivisors(x+1,n)*cnt
    return 2 #If it is a prime number the divisors are 1 and the number itself

num=1
i=1
while True:
    cnt=0
    if i%2==0:
        cnt=countDivisors(2,i/2)*countDivisors(2,(i+1))
    else:
        cnt=countDivisors(2,i)*countDivisors(2,(i+1)/2)
    num=i*(i+1)/2
    if cnt>500:
        break
    i+=1

print("The first triangle number to have over five hundred divisors is ",num)